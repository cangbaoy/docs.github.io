"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2405],{105:(e,a)=>{a.A=(e,a)=>{const t=e.__vccOpts||e;for(const[e,n]of a)t[e]=n;return t}},4328:(e,a,t)=>{t.r(a),t.d(a,{comp:()=>i,data:()=>c});var n=t(6904);const r=[(0,n.Fv)('<h1 id="spring-事务底层原理" tabindex="-1"><a class="header-anchor" href="#spring-事务底层原理"><span>Spring 事务底层原理</span></a></h1><h2 id="划分处理单元-ioc" tabindex="-1"><a class="header-anchor" href="#划分处理单元-ioc"><span>划分处理单元 IOC</span></a></h2><p>由于 Spring 解决的问题是对单个数据库进行局部事务处理的，具体的实现首相用 Spring 中的 IOC 划分了事务处理单元。并且将对事务的各种配置放到了 IOC 容器中（设置事务管理器，设置事务的传播特性及隔离机制）。</p><h2 id="aop-拦截需要进行事务处理的类" tabindex="-1"><a class="header-anchor" href="#aop-拦截需要进行事务处理的类"><span>AOP 拦截需要进行事务处理的类</span></a></h2><p>Spring 事务处理模块是通过 AOP 功能来实现声明式事务处理的，具体操作（比如事务实行的配置和读取，事务对象的抽象），用 <code>TransactionProxyFactoryBean</code> 接口来使用 AOP 功能，生成 <code>proxy</code> 代理对象，通过 <code>TransactionInterceptor</code> 完成对代理方法的拦截，将事务处理的功能编织到拦截的方法中。读取 IOC 容器事务配置属性，转化为 Spring 事务处理需要的内部数据结构（<code>TransactionAttributeSourceAdvisor</code>），转化为 <code>TransactionAttribute</code> 表示的数据对象。</p><h2 id="对事物处理实现-事务的生成、提交、回滚、挂起" tabindex="-1"><a class="header-anchor" href="#对事物处理实现-事务的生成、提交、回滚、挂起"><span>对事物处理实现（事务的生成、提交、回滚、挂起）</span></a></h2><p>Spring 委托给具体的事务处理器实现。实现了一个抽象和适配。适配的具体事务处理器：DataSource 数据源支持、Hibernate 数据源事务处理支持、JDO 数据源事务处理支持，JPA、JTA 数据源事务处理支持。这些支持都是通过设计 <code>PlatformTransactionManager</code>、<code>AbstractPlatforTransaction</code> 一系列事务处理的支持。 为常用数据源支持提供了一系列的 <code>TransactionManager</code>。</p><h2 id="结合" tabindex="-1"><a class="header-anchor" href="#结合"><span>结合</span></a></h2><p><code>PlatformTransactionManager</code> 实现了 <code>TransactionInterception</code> 接口，让其与 <code>TransactionProxyFactoryBean</code> 结合起来，形成一个 Spring 声明式事务处理的设计体系。</p>',9)],o={},i=(0,t(105).A)(o,[["render",function(e,a){return(0,n.uX)(),(0,n.CE)("div",null,r)}]]),c=JSON.parse('{"path":"/exambook/Java-Spring6.html","title":"Spring 事务底层原理","lang":"zh-CN","frontmatter":{"description":"Spring 事务底层原理 划分处理单元 IOC 由于 Spring 解决的问题是对单个数据库进行局部事务处理的，具体的实现首相用 Spring 中的 IOC 划分了事务处理单元。并且将对事务的各种配置放到了 IOC 容器中（设置事务管理器，设置事务的传播特性及隔离机制）。 AOP 拦截需要进行事务处理的类 Spring 事务处理模块是通过 AOP 功...","head":[["meta",{"property":"og:url","content":"https://www.sansei.top/exambook/Java-Spring6.html"}],["meta",{"property":"og:site_name","content":"川上富江"}],["meta",{"property":"og:title","content":"Spring 事务底层原理"}],["meta",{"property":"og:description","content":"Spring 事务底层原理 划分处理单元 IOC 由于 Spring 解决的问题是对单个数据库进行局部事务处理的，具体的实现首相用 Spring 中的 IOC 划分了事务处理单元。并且将对事务的各种配置放到了 IOC 容器中（设置事务管理器，设置事务的传播特性及隔离机制）。 AOP 拦截需要进行事务处理的类 Spring 事务处理模块是通过 AOP 功..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-30T14:18:24.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-30T14:18:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring 事务底层原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-30T14:18:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"划分处理单元 IOC","slug":"划分处理单元-ioc","link":"#划分处理单元-ioc","children":[]},{"level":2,"title":"AOP 拦截需要进行事务处理的类","slug":"aop-拦截需要进行事务处理的类","link":"#aop-拦截需要进行事务处理的类","children":[]},{"level":2,"title":"对事物处理实现（事务的生成、提交、回滚、挂起）","slug":"对事物处理实现-事务的生成、提交、回滚、挂起","link":"#对事物处理实现-事务的生成、提交、回滚、挂起","children":[]},{"level":2,"title":"结合","slug":"结合","link":"#结合","children":[]}],"git":{"createdTime":1725027504000,"updatedTime":1725027504000,"contributors":[{"name":"him","email":"yph0228@163.com","commits":1}]},"readingTime":{"minutes":1.35,"words":406},"filePathRelative":"exambook/Java-Spring6.md","localizedDate":"2024年8月30日","autoDesc":true}')}}]);