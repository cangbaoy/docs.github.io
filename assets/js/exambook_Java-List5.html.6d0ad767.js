"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7447],{105:(a,e)=>{e.A=(a,e)=>{const t=a.__vccOpts||a;for(const[a,s]of e)t[a]=s;return t}},767:(a,e,t)=>{t.r(e),t.d(e,{comp:()=>l,data:()=>o});var s=t(6904);const n=[(0,s.Lk)("h1",{id:"hashmap-和-hashtable-的区别",tabindex:"-1"},[(0,s.Lk)("a",{class:"header-anchor",href:"#hashmap-和-hashtable-的区别"},[(0,s.Lk)("span",null,"HashMap 和 HashTable 的区别")])],-1),(0,s.Lk)("ul",null,[(0,s.Lk)("li",null,"HashMap 几乎可以等价于 HashTable，除了 HashMap 是非 synchronized 的，并可以接受 null(HashMap 可以接受为 null 的键值 (key) 和值 (value)，而 HashTable 则不行)。"),(0,s.Lk)("li",null,"HashMap 是非 synchronized，而 HashTable 是 synchronized，这意味着 HashTable 是线程安全的，多个线程可以共享一个 HashTable；而如果没有正确的同步的话，多个线程是不能共享 HashMap 的。Java 5 提供了 ConcurrentHashMap，它是 HashTable 的替代，比 HashTable 的扩展性更好。"),(0,s.Lk)("li",null,"另一个区别是 HashMap 的迭代器 (Iterator) 是 fail-fast 迭代器，而 HashTable 的 enumerator 迭代器不是 fail-fast 的。所以当有其它线程改变了 HashMap 的结构（增加或者移除元素），将会抛出 ConcurrentModificationException，但迭代器本身的 remove() 方法移除元素则不会抛出 ConcurrentModificationException 异常。但这并不是一个一定发生的行为，要看 JVM。这条同样也是 Enumeration 和 Iterator 的区别。"),(0,s.Lk)("li",null,"由于 HashTable 是线程安全的也是 synchronized，所以在单线程环境下它比 HashMap 要慢。如果你不需要同步，只需要单一线程，那么使用 HashMap 性能要好过 HashTable。"),(0,s.Lk)("li",null,"HashMap 不能保证随着时间的推移 Map 中的元素次序是不变的。")],-1)],h={},l=(0,t(105).A)(h,[["render",function(a,e){return(0,s.uX)(),(0,s.CE)("div",null,n)}]]),o=JSON.parse('{"path":"/exambook/Java-List5.html","title":"HashMap 和 HashTable 的区别","lang":"zh-CN","frontmatter":{"description":"HashMap 和 HashTable 的区别 HashMap 几乎可以等价于 HashTable，除了 HashMap 是非 synchronized 的，并可以接受 null(HashMap 可以接受为 null 的键值 (key) 和值 (value)，而 HashTable 则不行)。 HashMap 是非 synchronized，而 Has...","head":[["meta",{"property":"og:url","content":"https://www.sansei.top/exambook/Java-List5.html"}],["meta",{"property":"og:site_name","content":"川上富江"}],["meta",{"property":"og:title","content":"HashMap 和 HashTable 的区别"}],["meta",{"property":"og:description","content":"HashMap 和 HashTable 的区别 HashMap 几乎可以等价于 HashTable，除了 HashMap 是非 synchronized 的，并可以接受 null(HashMap 可以接受为 null 的键值 (key) 和值 (value)，而 HashTable 则不行)。 HashMap 是非 synchronized，而 Has..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-30T14:18:24.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-30T14:18:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HashMap 和 HashTable 的区别\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-30T14:18:24.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1725027504000,"updatedTime":1725027504000,"contributors":[{"name":"him","email":"yph0228@163.com","commits":1}]},"readingTime":{"minutes":1.01,"words":304},"filePathRelative":"exambook/Java-List5.md","localizedDate":"2024年8月30日","autoDesc":true}')}}]);