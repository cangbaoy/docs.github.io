"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6692],{105:(e,t)=>{t.A=(e,t)=>{const o=e.__vccOpts||e;for(const[e,a]of t)o[e]=a;return o}},4226:(e,t,o)=>{o.r(t),o.d(t,{comp:()=>i,data:()=>c});var a=o(6904);const r=[(0,a.Lk)("h1",{id:"如何保证消息的有序性",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#如何保证消息的有序性"},[(0,a.Lk)("span",null,"如何保证消息的有序性")])],-1),(0,a.Lk)("ol",null,[(0,a.Lk)("li",null,"通过轮询所有队列的方式来确定消息被发送到哪一个队列（负载均衡策略）。订单号相同的消息会被先后发送到同一个队列中，"),(0,a.Lk)("li",null,"在获取到路由信息以后，会根据算法来选择一个队列，同一个 OrderId 获取到的肯定是同一个队列。")],-1)],n={},i=(0,o(105).A)(n,[["render",function(e,t){return(0,a.uX)(),(0,a.CE)("div",null,r)}]]),c=JSON.parse('{"path":"/knowledge/Java-MQ6.html","title":"如何保证消息的有序性","lang":"zh-CN","frontmatter":{"description":"如何保证消息的有序性 通过轮询所有队列的方式来确定消息被发送到哪一个队列（负载均衡策略）。订单号相同的消息会被先后发送到同一个队列中， 在获取到路由信息以后，会根据算法来选择一个队列，同一个 OrderId 获取到的肯定是同一个队列。","head":[["meta",{"property":"og:url","content":"https://www.sansei.top/knowledge/Java-MQ6.html"}],["meta",{"property":"og:site_name","content":"川上富江"}],["meta",{"property":"og:title","content":"如何保证消息的有序性"}],["meta",{"property":"og:description","content":"如何保证消息的有序性 通过轮询所有队列的方式来确定消息被发送到哪一个队列（负载均衡策略）。订单号相同的消息会被先后发送到同一个队列中， 在获取到路由信息以后，会根据算法来选择一个队列，同一个 OrderId 获取到的肯定是同一个队列。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-29T09:01:42.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-29T09:01:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何保证消息的有序性\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-29T09:01:42.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1724922102000,"updatedTime":1724922102000,"contributors":[{"name":"him","email":"yph0228@163.com","commits":1}]},"readingTime":{"minutes":0.34,"words":102},"filePathRelative":"knowledge/Java-MQ6.md","localizedDate":"2024年8月29日","autoDesc":true}')}}]);